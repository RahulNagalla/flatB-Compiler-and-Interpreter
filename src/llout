; ModuleID = 'flatB'

@b = common global i32 0
@c = common global i32 0
@a = global [100 x i32] zeroinitializer
@0 = private unnamed_addr constant [3 x i8] c"%d\00"
@1 = private unnamed_addr constant [3 x i8] c"%s\00"
@2 = private unnamed_addr constant [2 x i8] c"\0A\00"
@3 = private unnamed_addr constant [3 x i8] c"%d\00"
@4 = private unnamed_addr constant [3 x i8] c"%s\00"
@5 = private unnamed_addr constant [2 x i8] c"\0A\00"
@6 = private unnamed_addr constant [3 x i8] c"%d\00"
@7 = private unnamed_addr constant [3 x i8] c"%s\00"
@8 = private unnamed_addr constant [2 x i8] c"\0A\00"

declare i32 @printf(i8*, ...)

define internal void @main() {
entry:
  store i32 2, i32* @b
  store i32 3, i32* @c
  %0 = load i32, i32* @b
  store i32 %0, i32* getelementptr inbounds ([100 x i32], [100 x i32]* @a, i32 0, i32 2)
  %1 = load i32, i32* @c
  store i32 %1, i32* getelementptr inbounds ([100 x i32], [100 x i32]* @a, i32 0, i32 4)
  %2 = load i32, i32* getelementptr inbounds ([100 x i32], [100 x i32]* @a, i32 0, i32 2)
  %printfCall = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0), i32 %2)
  %printfCall1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  %3 = load i32, i32* getelementptr inbounds ([100 x i32], [100 x i32]* @a, i32 0, i32 4)
  %printfCall2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), i32 %3)
  %printfCall3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  store i32 0, i32* @b
  %4 = load i32, i32* @b
  br label %for_condition

for_condition:                                    ; preds = %for_body, %entry
  %5 = phi i32 [ %4, %entry ], [ %10, %for_body ]
  %6 = icmp slt i32 %5, 10
  br i1 %6, label %for_body, label %for_after

for_body:                                         ; preds = %for_condition
  %7 = load i32, i32* @b
  %a_IDX = getelementptr [100 x i32], [100 x i32]* @a, i32 0, i32 %7
  %8 = load i32, i32* %a_IDX
  %printfCall4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @6, i32 0, i32 0), i32 %8)
  %printfCall5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0))
  %9 = load i32, i32* @b
  %10 = add i32 %9, 2
  store i32 %10, i32* @b
  br label %for_condition

for_after:                                        ; preds = %for_condition
  ret void
}
