; ModuleID = 'flatB'

@N = common global i32 0
@i = common global i32 0
@j = common global i32 0
@k = common global i32 0
@isprime = global [5000005 x i32] zeroinitializer
@primes = global [5000005 x i32] zeroinitializer
@0 = private unnamed_addr constant [3 x i8] c"%s\00"
@1 = private unnamed_addr constant [29 x i8] c"Total Number of Primes up to\00"
@2 = private unnamed_addr constant [3 x i8] c"%s\00"
@3 = private unnamed_addr constant [2 x i8] c" \00"
@4 = private unnamed_addr constant [3 x i8] c"%d\00"
@5 = private unnamed_addr constant [3 x i8] c"%s\00"
@6 = private unnamed_addr constant [2 x i8] c" \00"
@7 = private unnamed_addr constant [3 x i8] c"%s\00"
@8 = private unnamed_addr constant [5 x i8] c"is :\00"
@9 = private unnamed_addr constant [3 x i8] c"%s\00"
@10 = private unnamed_addr constant [2 x i8] c" \00"
@11 = private unnamed_addr constant [3 x i8] c"%d\00"
@12 = private unnamed_addr constant [3 x i8] c"%s\00"
@13 = private unnamed_addr constant [2 x i8] c"\0A\00"

declare i32 @printf(i8*, ...)

define void @main() {
entry:
  store i32 5000000, i32* @N
  store i32 0, i32* @i
  %0 = load i32, i32* @i
  br label %for_condition

for_condition:                                    ; preds = %for_body, %entry
  %1 = phi i32 [ %0, %entry ], [ %6, %for_body ]
  %2 = load i32, i32* @N
  %3 = icmp slt i32 %1, %2
  br i1 %3, label %for_body, label %for_after

for_body:                                         ; preds = %for_condition
  %4 = load i32, i32* @i
  %isprime_IDX = getelementptr [5000005 x i32], [5000005 x i32]* @isprime, i32 0, i32 %4
  store i32 1, i32* %isprime_IDX
  %5 = load i32, i32* @i
  %6 = add i32 %5, 1
  store i32 %6, i32* @i
  br label %for_condition

for_after:                                        ; preds = %for_condition
  store i32 0, i32* @k
  store i32 2, i32* @i
  %7 = load i32, i32* @i
  br label %for_condition1

for_condition1:                                   ; preds = %ifnext, %for_after
  %8 = phi i32 [ %7, %for_after ], [ %19, %ifnext ]
  %9 = load i32, i32* @N
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %for_body2, label %for_after3

for_body2:                                        ; preds = %for_condition1
  %11 = load i32, i32* @i
  %isprime_IDX4 = getelementptr [5000005 x i32], [5000005 x i32]* @isprime, i32 0, i32 %11
  %12 = load i32, i32* %isprime_IDX4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %if, label %ifnext

for_after3:                                       ; preds = %for_condition1
  %printfCall = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @1, i32 0, i32 0))
  %printfCall9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %14 = load i32, i32* @N
  %printfCall10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0), i32 %14)
  %printfCall11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  %printfCall12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0))
  %printfCall13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  %15 = load i32, i32* @k
  %printfCall14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @11, i32 0, i32 0), i32 %15)
  %printfCall15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  ret void

if:                                               ; preds = %for_body2
  %16 = load i32, i32* @i
  %multmp = mul i32 2, %16
  store i32 %multmp, i32* @j
  %17 = load i32, i32* @j
  br label %for_condition5

ifnext:                                           ; preds = %for_after7, %for_body2
  %18 = load i32, i32* @i
  %19 = add i32 %18, 1
  store i32 %19, i32* @i
  br label %for_condition1

for_condition5:                                   ; preds = %for_body6, %if
  %20 = phi i32 [ %17, %if ], [ %26, %for_body6 ]
  %21 = load i32, i32* @N
  %22 = icmp slt i32 %20, %21
  br i1 %22, label %for_body6, label %for_after7

for_body6:                                        ; preds = %for_condition5
  %23 = load i32, i32* @j
  %isprime_IDX8 = getelementptr [5000005 x i32], [5000005 x i32]* @isprime, i32 0, i32 %23
  store i32 0, i32* %isprime_IDX8
  %24 = load i32, i32* @i
  %25 = load i32, i32* @j
  %26 = add i32 %25, %24
  store i32 %26, i32* @j
  br label %for_condition5

for_after7:                                       ; preds = %for_condition5
  %27 = load i32, i32* @i
  %28 = load i32, i32* @k
  %primes_IDX = getelementptr [5000005 x i32], [5000005 x i32]* @primes, i32 0, i32 %28
  store i32 %27, i32* %primes_IDX
  %29 = load i32, i32* @k
  %addtmp = add i32 %29, 1
  store i32 %addtmp, i32* @k
  br label %ifnext
}
