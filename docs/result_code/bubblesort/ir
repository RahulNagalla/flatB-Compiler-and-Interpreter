; ModuleID = 'flatB'

@N = common global i32 0
@i = common global i32 0
@j = common global i32 0
@temp = common global i32 0
@p = common global i32 0
@P = common global i32 0
@arr = global [100005 x i32] zeroinitializer

declare i32 @printf(i8*, ...)

define void @main() {
entry:
  store i32 31, i32* @P
  store i32 1, i32* @p
  store i32 20000, i32* @N
  store i32 0, i32* @i
  %0 = load i32, i32* @i
  br label %for_condition

for_condition:                                    ; preds = %for_body, %entry
  %1 = phi i32 [ %0, %entry ], [ %9, %for_body ]
  %2 = load i32, i32* @N
  %3 = icmp slt i32 %1, %2
  br i1 %3, label %for_body, label %for_after

for_body:                                         ; preds = %for_condition
  %4 = load i32, i32* @p
  %5 = load i32, i32* @i
  %arr_IDX = getelementptr [100005 x i32], [100005 x i32]* @arr, i32 0, i32 %5
  store i32 %4, i32* %arr_IDX
  %6 = load i32, i32* @p
  %7 = load i32, i32* @P
  %multmp = mul i32 %6, %7
  %modtmp = srem i32 %multmp, 123456
  store i32 %modtmp, i32* @p
  %8 = load i32, i32* @i
  %9 = add i32 %8, 1
  store i32 %9, i32* @i
  br label %for_condition

for_after:                                        ; preds = %for_condition
  store i32 0, i32* @i
  %10 = load i32, i32* @i
  br label %for_condition1

for_condition1:                                   ; preds = %for_after6, %for_after
  %11 = phi i32 [ %10, %for_after ], [ %24, %for_after6 ]
  %12 = load i32, i32* @N
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %for_body2, label %for_after3

for_body2:                                        ; preds = %for_condition1
  store i32 0, i32* @j
  %14 = load i32, i32* @j
  br label %for_condition4

for_after3:                                       ; preds = %for_condition1
  ret void

for_condition4:                                   ; preds = %ifnext, %for_body2
  %15 = phi i32 [ %14, %for_body2 ], [ %33, %ifnext ]
  %16 = load i32, i32* @N
  %17 = load i32, i32* @i
  %subtmp = sub i32 %16, %17
  %subtmp7 = sub i32 %subtmp, 1
  %18 = icmp slt i32 %15, %subtmp7
  br i1 %18, label %for_body5, label %for_after6

for_body5:                                        ; preds = %for_condition4
  %19 = load i32, i32* @j
  %arr_IDX8 = getelementptr [100005 x i32], [100005 x i32]* @arr, i32 0, i32 %19
  %20 = load i32, i32* %arr_IDX8
  %21 = load i32, i32* @j
  %addtmp = add i32 %21, 1
  %arr_IDX9 = getelementptr [100005 x i32], [100005 x i32]* @arr, i32 0, i32 %addtmp
  %22 = load i32, i32* %arr_IDX9
  %gttmp = icmp sgt i32 %20, %22
  br i1 %gttmp, label %if, label %ifnext

for_after6:                                       ; preds = %for_condition4
  %23 = load i32, i32* @i
  %24 = add i32 %23, 1
  store i32 %24, i32* @i
  br label %for_condition1

if:                                               ; preds = %for_body5
  %25 = load i32, i32* @j
  %arr_IDX10 = getelementptr [100005 x i32], [100005 x i32]* @arr, i32 0, i32 %25
  %26 = load i32, i32* %arr_IDX10
  store i32 %26, i32* @temp
  %27 = load i32, i32* @j
  %addtmp11 = add i32 %27, 1
  %arr_IDX12 = getelementptr [100005 x i32], [100005 x i32]* @arr, i32 0, i32 %addtmp11
  %28 = load i32, i32* %arr_IDX12
  %29 = load i32, i32* @j
  %arr_IDX13 = getelementptr [100005 x i32], [100005 x i32]* @arr, i32 0, i32 %29
  store i32 %28, i32* %arr_IDX13
  %30 = load i32, i32* @temp
  %31 = load i32, i32* @j
  %addtmp14 = add i32 %31, 1
  %arr_IDX15 = getelementptr [100005 x i32], [100005 x i32]* @arr, i32 0, i32 %addtmp14
  store i32 %30, i32* %arr_IDX15
  br label %ifnext

ifnext:                                           ; preds = %if, %for_body5
  %32 = load i32, i32* @j
  %33 = add i32 %32, 1
  store i32 %33, i32* @j
  br label %for_condition4
}
